import java.io.File;
import java.io.FileNotFoundException;
import java.util.LinkedList;
import java.util.Scanner;


class Runner
{

	static LinkedList<Node> teachers = new LinkedList<Node> ();
	static LinkedList<Node> students = new LinkedList<Node> ();
	static LinkedList<Node> dummyStudents = new LinkedList<Node> ();

	public static void main(String[] args) throws FileNotFoundException
	{
		constructNodes();

		createDummySetUp();

		LinkedList<LinkedList<Node>> studentparts = new LinkedList<LinkedList<Node>> ();

		for(int i = 0; i < students.size(); i+= teachers.size())
		{
			studentparts.add((LinkedList<Node>) students.subList(i,  Math.min(i + teachers.size(), students.size())));
		}

		LinkedList<LinkedList<Node>> teacherClones = new LinkedList<LinkedList<Node>> ();

		for(int i = 0; i < studentparts.size(); i++)
		{
			LinkedList<Node> temp = new LinkedList<Node> ();
			for(Node n : teachers)
			{
				temp.add(new Node(n.classification, n.name, n.classes));
			}
			teacherClones.add(temp);
		}

		for(int h = 0; h < students.size(); h++)
		{
			LinkedList<Node> studs = studentparts.get(h);
			LinkedList<Node> teach = teacherClones.get(h);
			for(int i = 0; i < studs.size(); i++)
			{
				Node stud = studs.get(i);
				for(int j = 0; j < stud.classes.size(); j++)
				{
					String class1 = stud.classes.get(j);
					for(int k = 0; k < teach.size(); k++)
					{
						Node teacher = teach.get(k);
						if (teacher.classes.contains(class1))
						{
							Edge e = teachers.get(k).getEdge(dummyStudents.get(i));
							Edge f = new Edge(studs.get(i), teach.get(k), e.color);
							f.classname = class1;
							studs.get(i).neighbors.add(f);
							teach.get(k).neighbors.add(f);
						}
					}
				}

			}
		}

	}

	static void constructNodes() throws FileNotFoundException
	{
		Scanner scan = new Scanner(new File("data.in"));
		
		while(scan.hasNextLine())
		{
			String line = scan.nextLine();
			Scanner temp = new Scanner(line);
			String name = temp.next();
			String classification = temp.next();
			LinkedList<String> classes = new LinkedList<String> ();
			while(temp.hasNext())
			{
				classes.add(temp.next());
			}
			if (classification == "T")
			{
				teachers.add(new Node(Node.Classification.TEACHER, name, classes));
			}
			else
			{
				students.add(new Node(Node.Classification.STUDENT, name, classes));
			}
			
		}

	}

	static void createDummySetUp()
	{
		for(int i = 0; i < teachers.size(); i++)
		{
			dummyStudents.add(new Node(Node.Classification.STUDENT, ""));
		}

		for (int i = 0; i < teachers.size(); i++)
		{
			int count = i;
			for(Node d: dummyStudents)
			{
				d.add(teachers.get(i), (++count % 3));
			}
		}
	}

}
